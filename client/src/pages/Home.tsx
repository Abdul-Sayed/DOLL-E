import { useState, useEffect } from "react";
import { Loader, RenderCards, FormField } from "../components";
import { PostType } from "../types";

const Home = () => {
  const [posts, setPosts] = useState<PostType[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [searchText, setSearchText] = useState<string>("");
  const [searchedResults, setSearchedResults] = useState<PostType[]>([]);

  useEffect(() => {
    // Fetch all the posts
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch(`http://localhost:8080/api/posts`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
        if (response.ok) {
          const posts = await response.json();
          console.log("posts", posts);
          setPosts(posts.data.reverse());
        }
      } catch (error) {
        alert(error);
      } finally {
        setLoading(false);
      }
    };
    fetchPosts();
  }, []);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    console.log("value: ", e.target.value);
    const { value } = e.target;
    setSearchText(value);
    if (value) {
      const filteredPosts = posts.filter(
        (post) =>
          post.name.toLowerCase().includes(value.toLowerCase()) ||
          post.prompt.toLowerCase().includes(value.toLowerCase())
      );
      setSearchedResults(filteredPosts);
    }
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div className="">
        <h1 className="font-extrabold text-[32px] text-app_black">The Community Showcase</h1>
        <p className="mt-2 text-app_gray text-[16px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning images generated by
          DALL-E AI
        </p>
      </div>
      <div className="mt-12 mb-8">
        {
          <FormField
            type="text"
            labelName="Search images"
            name="text"
            value={searchText}
            placeholder="Search"
            handleChange={(e) => handleSearch(e)}
          />
        }
      </div>
      <div>
        {loading ? (
          <Loader />
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-app_gray text-3xl mb-3">
                Showing results for <span className="text-app_black">{searchText}</span>
              </h2>
            )}
            <div className="grid grid-cols-1 lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 gap-3">
              {searchText ? (
                <RenderCards posts={searchedResults} title={searchText} />
              ) : (
                <RenderCards posts={posts} title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
